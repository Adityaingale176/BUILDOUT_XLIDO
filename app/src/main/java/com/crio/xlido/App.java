/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.crio.xlido;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import com.crio.xlido.services.EventService;
import com.crio.xlido.services.QuestionService;
import com.crio.xlido.services.UserService;
import com.crio.xlido.entities.Event;
import com.crio.xlido.entities.Question;
import com.crio.xlido.entities.User;
import com.crio.xlido.repositories.*;

public class App {

    // Initialize repositories
    private final IUserRepository userRepository = new UserRepository();
    private final IEventRepository eventRepository = new EventRepository();
    private final IQuestionRepository questionRepository = new QuestionRepository();

    // Initialize services
    private final UserService userService = new UserService(userRepository);
    private final EventService eventService = new EventService(eventRepository, userRepository);
    private final QuestionService questionService = new QuestionService(eventRepository, userRepository, questionRepository);

    public static void main(String[] args) {

        // Test your code by ading commands in sample_input/sample_input_one.txt
        // Run run.sh script using "bash run.sh" in your terminal.
        if (args.length == 1){
            List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
            String inputFile = commandLineArgs.get(0).split("=")[1];
            try {
                List<String> file_commands = Files.readAllLines(Paths.get(inputFile));
                // Execute the commands
                new App().run(file_commands);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return;
        }        

        // OR
        // Test your code by adding commands in this list
        List<String> inplace_commands = new LinkedList<>(){
            {
            }
        };

        new App().run(inplace_commands);
 
    }
    public void run(List<String> commands){

        Iterator<String> it = commands.iterator();
        while(it.hasNext()){
            String line = it.next();
                if(line == null){
                    break;
                }
                List<String> tokens = Arrays.asList(line.split(","));

                try {
                    //Execute Services
                    switch(tokens.get(0)){
                        case "CREATE_USER":
                        CREATE_USER(tokens);
                        break;
                        case "CREATE_EVENT":
                        CREATE_EVENT(tokens);
                        break;
                        case "DELETE_EVENT":
                        DELETE_EVENT(tokens);
                        break;
                        case "ADD_QUESTION":
                        ADD_QUESTION(tokens);
                        break;
                        case "DELETE_QUESTION":
                        DELETE_QUESTION(tokens);
                        break;
                        case "UPVOTE_QUESTION":
                        UPVOTE_QUESTION(tokens);
                        break;
                        case "REPLY_QUESTION":
                        REPLY_QUESTION(tokens);
                        break;
                        case "LIST_QUESTIONS":
                        LIST_QUESTIONS(tokens);
                        break;
                        default:
                            throw new RuntimeException("INVALID_COMMAND");
                }
                } catch (Exception e) {
                    System.out.println("ERROR: " + e.getMessage());
                }
        }
    }

    public void CREATE_USER(List<String> tokens){
        String email = tokens.get(1);
        String password = tokens.get(2);
        User user = userService.CREATE_USER(email, password);
        System.out.println("User ID: " + user.getUserId());
    }

    public void CREATE_EVENT(List<String> tokens){
        String title = tokens.get(1);
        Long organizerId = Long.parseLong(tokens.get(2));
        Event event = eventService.CREATE_EVENT(title, organizerId);
        System.out.println("Event ID: " + event.getEventId());
    }

    public void DELETE_EVENT(List<String> tokens){
        Long eventId = Long.parseLong(tokens.get(1));
        Long userId = Long.parseLong(tokens.get(2));
        eventService.DELETE_EVENT(eventId, userId);
        System.out.println("EVENT_DELETED "+ eventId);
    }

    public void ADD_QUESTION(List<String> tokens){
        String content = tokens.get(1);
        Long userId = Long.parseLong(tokens.get(2));
        Long eventId = Long.parseLong(tokens.get(3));
        Question question = questionService.ADD_QUESTION(content, userId, eventId);
        System.out.println("Question ID: "+ question.getQuestionId());
    }

    public void DELETE_QUESTION(List<String> tokens){
        Long questionId = Long.parseLong(tokens.get(1));
        Long userId = Long.parseLong(tokens.get(2));
        
        Question question = questionService.DELETE_QUESTION(questionId, userId);
        System.out.println("QUESTION_DELETED "+ question.getQuestionId());
    }

    public void UPVOTE_QUESTION(List<String> tokens){
        Long questionId = Long.parseLong(tokens.get(1));
        Long userId = Long.parseLong(tokens.get(2));
        
        Question question = questionService.UPVOTE_QUESTION(questionId, userId);
        System.out.println("QUESTION_UPVOTED "+ question.getQuestionId());
    }

    public void REPLY_QUESTION(List<String> tokens){
        String content = tokens.get(1);
        Long questionId = Long.parseLong(tokens.get(2));
        Long userId = Long.parseLong(tokens.get(3));
        
        Question question = questionService.REPLY_QUESTION(content, questionId, userId);
        System.out.println("REPLY_ADDED");
    }

    public void LIST_QUESTIONS(List<String> tokens){
        Long eventId = Long.parseLong(tokens.get(1));
        String sortBy = tokens.get(2);
        
        List<Question> questions = questionService.LIST_QUESTIONS(eventId, sortBy);
        for (Question question : questions) {
            System.out.println("Question ID: "+ question.getQuestionId());
            System.out.println("Content: "+ question.getContent());
            System.out.println("Votes: "+ questionRepository.getVotesByQuestionId(question.getQuestionId()));

            String reply = questionRepository.getReplyByQuestionID(question.getQuestionId());

            if(reply != null) {
                Long userId = questionRepository.getReplyUSerByQuestionID(question.getQuestionId());

                System.out.println("Replies:\n  - User " +userId+ ": " +reply + "\n");
                
            }else {
                System.out.println("Replies:\n");
            }
    }
}
}
